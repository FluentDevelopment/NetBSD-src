# $NetBSD$
#
# FLUENT_KVM machine description file

include	"arch/amd64/conf/std.amd64"

options 	INCLUDE_CONFIG_FILE	# embed config file in kernel binary

#ident 		"FLUENT_KVM-$Revision$"

maxusers	64		# estimated number of users

# delay between "rebooting ..." message and hardware reset, in milliseconds
#options 	CPURESET_DELAY=2000

# This option allows you to force a serial console at the specified
# I/O address.   see console(4) for details.
#options 	CONSDEVNAME="\"com\"",CONADDR=0x2f8,CONSPEED=57600
#	you don't want the option below ON iff you are using the
#	serial console option of the new boot strap code.
#options 	CONS_OVERRIDE	# Always use above! independent of boot info

# The following options override the memory sizes passed in from the boot
# block.  Use them *only* if the boot block is unable to determine the correct
# values.  Note that the BIOS may *correctly* report less than 640k of base
# memory if the extended BIOS data area is located at the top of base memory
# (as is the case on most recent systems).
#options 	REALBASEMEM=639		# size of base memory (in KB)
#options 	REALEXTMEM=15360	# size of extended memory (in KB)

# The following options limit the overall size of physical memory
# and/or the maximum address used by the system.
# Contrary to REALBASEMEM and REALEXTMEM, they still use the BIOS memory map
# and can deal with holes in the memory layout.
#options 	PHYSMEM_MAX_SIZE=64	# max size of physical memory (in MB)
#options 	PHYSMEM_MAX_ADDR=2048	# don't use memory above this (in MB)

# Standard system options

options 	INSECURE	# disable kernel security levels - X needs this

options 	RTC_OFFSET=0	# hardware clock is this many mins. west of GMT
options 	NTP		# NTP phase/frequency locked loop

options 	KTRACE		# system call tracing via ktrace(1)

options		CPU_UCODE	# cpu ucode loading support

# Note: SysV IPC parameters could be changed dynamically, see sysctl(8).
options 	SYSVMSG		# System V-like message queues
options 	SYSVSEM		# System V-like semaphores
options 	SYSVSHM		# System V-like memory sharing

options 	MODULAR		# new style module(7) framework
options 	MODULAR_DEFAULT_AUTOLOAD
options 	USERCONF	# userconf(4) support
#options 	PIPE_SOCKETPAIR	# smaller, but slower pipe(2)
options 	SYSCTL_INCLUDE_DESCR	# Include sysctl descriptions in kernel

# CPU features
acpicpu*	at cpu?		# ACPI CPU (including frequency scaling)
#coretemp*	at cpu?		# Intel on-die thermal sensor
#est0		at cpu0		# Intel Enhanced SpeedStep (non-ACPI)
#odcm0		at cpu0		# On-demand clock modulation
#powernow0	at cpu0		# AMD PowerNow! and Cool'n'Quiet (non-ACPI)
vmt0		at cpu0		# VMware Tools

# Alternate buffer queue strategies for better responsiveness under high
# disk I/O load.
#options 	BUFQ_READPRIO
options 	BUFQ_PRIOCSCAN

# Diagnostic/debugging support options
#options 	DIAGNOSTIC	# inexpensive kernel consistency checks
				# XXX to be commented out on release branch
#options 	DEBUG		# expensive debugging checks/support
#options 	LOCKDEBUG	# expensive locking checks/support
#options 	KMEMSTATS	# kernel memory statistics (vmstat -m)

#
# Because gcc omits the frame pointer for any -O level, the line below
# is needed to make backtraces in DDB work.
#
makeoptions	COPTS="-O2 -fno-omit-frame-pointer"
options 	DDB		# in-kernel debugger
#options	DDB_COMMANDONENTER="bt"	# execute command when ddb is entered
#options 	DDB_ONPANIC=1	# see also sysctl(7): `ddb.onpanic'
options 	DDB_HISTORY_SIZE=512	# enable history editing in DDB
#options 	KGDB		# remote debugger
#options 	KGDB_DEVNAME="\"com\"",KGDB_DEVADDR=0x3f8,KGDB_DEVRATE=9600
#makeoptions	DEBUG="-g"	# compile full symbol table
#options 	SYSCALL_STATS	# per syscall counts
#options 	SYSCALL_TIMES	# per syscall times
#options 	SYSCALL_TIMES_HASCOUNTER	# use 'broken' rdtsc (soekris)

# Compatibility options
options 	COMPAT_15	# compatibility with NetBSD 1.5,
options 	COMPAT_16	# NetBSD 1.6,
options 	COMPAT_20	# NetBSD 2.0,
options 	COMPAT_30	# NetBSD 3.0,
options 	COMPAT_40	# NetBSD 4.0,
options 	COMPAT_50	# NetBSD 5.0,
options 	COMPAT_60	# NetBSD 6.0 compatibility.
options 	COMPAT_43	# and 4.3BSD
options 	COMPAT_386BSD_MBRPART # recognize old partition ID

#options 	COMPAT_OSSAUDIO
options 	COMPAT_NETBSD32
options 	COMPAT_LINUX
options 	COMPAT_LINUX32	# req. COMPAT_LINUX and COMPAT_NETBSD32
options 	EXEC_ELF32
options 	COMPAT_BSDPTY	# /dev/[pt]ty?? ptys.

# Wedge support
options 	DKWEDGE_AUTODISCOVER	# Automatically add dk(4) instances
options 	DKWEDGE_METHOD_GPT	# Supports GPT partitions as wedges
# The following three options can break /etc/fstab, so handle with care
#options 	DKWEDGE_METHOD_BSDLABEL	# Support disklabel entries as wedges
#options 	DKWEDGE_METHOD_MBR	# Support MBR partitions as wedges
#options	DKWEDGE_METHOD_APPLE    # Support Apple partitions as wedges

# File systems
file-system 	FFS		# UFS
file-system	MFS		# memory file system
file-system 	NFS		# Network File System client
file-system	TMPFS		# Efficient memory file-system
file-system	EXT2FS		# second extended file system (linux)
file-system	LFS		# log-structured file system
#file-system	NTFS		# Windows/NT file system (experimental)
file-system	CD9660		# ISO 9660 + Rock Ridge file system
file-system	MSDOSFS		# MS-DOS file system
file-system	FDESC		# /dev/fd
file-system	KERNFS		# /kern
file-system	NULLFS		# loopback file system
file-system	OVERLAY		# overlay file system
file-system	PROCFS		# /proc
file-system	PUFFS		# Userspace file systems (e.g. ntfs-3g & sshfs)
file-system	SMBFS		# experimental - CIFS; also needs nsmb (below)
file-system	UMAPFS		# NULLFS + uid and gid remapping
file-system	UNION		# union file system
file-system	CODA		# Coda File System; also needs vcoda (below)
file-system	PTYFS		# /dev/ptm support
#file-system	UDF		# experimental - OSTA UDF CD/DVD file-system
#file-system	HFS		# experimental - Apple HFS+ (read-only)
#file-system	NILFS		# experimental - NTT's NiLFS(2)

# File system options
options 	QUOTA		# legacy UFS quotas
options 	QUOTA2		# new, in-filesystem UFS quotas
options 	FFS_EI		# FFS Endian Independent support
options 	WAPBL		# File system journaling support
# Note that UFS_DIRHASH is suspected of causing kernel memory corruption.
# It is not recommended for general use.
#options 	UFS_DIRHASH	# UFS Large Directory Hashing - Experimental
options 	NFSSERVER	# Network File System server
#options 	EXT2FS_SYSTEM_FLAGS # makes ext2fs file flags (append and
				# immutable) behave as system flags.
#options 	FFS_NO_SNAPSHOT	# No FFS snapshot support
options 	UFS_EXTATTR	# Extended attribute support for UFS1

# Networking options
#options 	GATEWAY		# packet forwarding
options 	INET		# IP + ICMP + TCP + UDP
options 	INET6		# IPV6
options 	IPSEC		# IP security
#options 	IPSEC_DEBUG	# debug for IP security
#options 	MPLS		# MultiProtocol Label Switching (needs ifmpls)
#options 	MROUTING	# IP multicast routing
#options 	PIM		# Protocol Independent Multicast
options 	NETATALK	# AppleTalk networking protocols
options 	PPP_BSDCOMP	# BSD-Compress compression support for PPP
options 	PPP_DEFLATE	# Deflate compression support for PPP
options 	PPP_FILTER	# Active filter support for PPP (requires bpf)
options 	IPFILTER_LOG	# ipmon(8) log support
options 	IPFILTER_LOOKUP	# ippool(8) support
options 	IPFILTER_COMPAT # Compat for IP-Filter
#options 	IPFILTER_DEFAULT_BLOCK	# block all packets by default
#options 	TCP_DEBUG	# Record last TCP_NDEBUG packets with SO_DEBUG

#options 	ALTQ		# Manipulate network interfaces' output queues
#options 	ALTQ_BLUE	# Stochastic Fair Blue
#options 	ALTQ_CBQ	# Class-Based Queueing
#options 	ALTQ_CDNR	# Diffserv Traffic Conditioner
#options 	ALTQ_FIFOQ	# First-In First-Out Queue
#options 	ALTQ_FLOWVALVE	# RED/flow-valve (red-penalty-box)
#options 	ALTQ_HFSC	# Hierarchical Fair Service Curve
#options 	ALTQ_LOCALQ	# Local queueing discipline
#options 	ALTQ_PRIQ	# Priority Queueing
#options 	ALTQ_RED	# Random Early Detection
#options 	ALTQ_RIO	# RED with IN/OUT
#options 	ALTQ_WFQ	# Weighted Fair Queueing

# These options enable verbose messages for several subsystems.
# Warning, these may compile large string tables into the kernel!
#options 	ACPIVERBOSE	# verbose ACPI configuration messages
#options 	MIIVERBOSE	# verbose PHY autoconfig messages
#options 	PCIVERBOSE	# verbose PCI device autoconfig messages
#options 	PCI_CONFIG_DUMP	# verbosely dump PCI config space
#options 	PCMCIAVERBOSE	# verbose PCMCIA configuration messages
options 	SCSIVERBOSE	# human readable SCSI error messages
#options 	USBVERBOSE	# verbose USB device autoconfig messages

options 	NFS_BOOT_DHCP,NFS_BOOT_BOOTPARAM

#
# wscons options
#
# builtin terminal emulations
#options 	WSEMUL_SUN		# sun terminal emulation
options 	WSEMUL_VT100		# VT100 / VT220 emulation
# different kernel output - see dev/wscons/wsdisplayvar.h
options 	WS_KERNEL_FG=WSCOL_GREEN
#options 	WS_KERNEL_BG=WSCOL_BLACK
# compatibility to other console drivers
options 	WSDISPLAY_COMPAT_PCVT		# emulate some ioctls
options 	WSDISPLAY_COMPAT_SYSCONS	# emulate some ioctls
options 	WSDISPLAY_COMPAT_USL		# wsconscfg VT handling
options 	WSDISPLAY_COMPAT_RAWKBD		# can get raw scancodes
# don't attach pckbd as the console if no PS/2 keyboard is found
options 	PCKBD_CNATTACH_MAY_FAIL
# see dev/pckbport/wskbdmap_mfii.c for implemented layouts
#options 	PCKBD_LAYOUT="(KB_DE | KB_NODEAD)"
# allocate a number of virtual screens at autoconfiguration time
#options 	WSDISPLAY_DEFAULTSCREENS=4
# use a large software cursor that doesn't blink
options 	PCDISPLAY_SOFTCURSOR
# modify the screen type of the console; defaults to "80x25"
#options 	VGA_CONSOLE_SCREENTYPE="\"80x24\""
# work around a hardware bug that loaded fonts don't work; found on ATI cards
#options 	VGA_CONSOLE_ATI_BROKEN_FONTSEL
# console scrolling support.
options 	WSDISPLAY_SCROLLSUPPORT
# enable VGA raster mode capable of displaying multilingual text on console
#options 	VGA_RASTERCONSOLE
# enable splash screen support; requires genfb or radeonfb
#options 	SPLASHSCREEN

# Kernel root file system and dump configuration.
config		netbsd	root on ? type ?
#config		netbsd	root on sd0a type ffs
#config		netbsd	root on ? type nfs

#
# Device configuration
#

#IPMI support
#ipmi0		at mainbus?

# ACPI will be used if present. If not it will fall back to MPBIOS
acpi0		at mainbus0
options 	ACPI_SCANPCI		# find PCI roots using ACPI
options 	MPBIOS			# configure CPUs and APICs using MPBIOS
options 	MPBIOS_SCANPCI		# MPBIOS configures PCI roots
#options 	PCI_INTR_FIXUP		# PCI interrupt routing via ACPI
#options 	PCI_BUS_FIXUP		# fixup PCI bus numbering
#options 	PCI_ADDR_FIXUP		# fixup PCI I/O addresses
#options 	ACPI_ACTIVATE_DEV	# If set, activate inactive devices
options 	VGA_POST		# in-kernel support for VGA POST

# ACPI devices
#acpiacad*	at acpi?		# ACPI AC Adapter
#acpibat*	at acpi?		# ACPI Battery
#acpibut*	at acpi?		# ACPI Button
#acpidalb*	at acpi?		# Direct Application Launch Button
#acpiec* 	at acpi?		# ACPI Embedded Controller (late)
#acpiecdt*	at acpi?		# ACPI Embedded Controller (early)
#acpifan*	at acpi?		# ACPI Fan
#acpilid*	at acpi?		# ACPI Lid Switch
#acpipmtr*	at acpi?		# ACPI Power Meter (experimental)
#acpismbus*	at acpi?		# ACPI SMBus CMI (experimental)
#acpitz* 	at acpi?		# ACPI Thermal Zone
#acpivga*	at acpi?		# ACPI Display Adapter
#acpiout*	at acpivga?		# ACPI Display Output Device
#acpiwdrt*	at acpi?		# ACPI Watchdog Resource Table
#acpiwmi*	at acpi?		# ACPI WMI Mapper

# Mainboard devices
#attimer*	at acpi?		# AT Timer
com*		at acpi?		# Serial communications interface
fdc*		at acpi?		# Floppy disk controller
hpet*		at acpihpetbus?		# High Precision Event Timer (table)
hpet*		at acpinodebus?		# High Precision Event Timer (device)
#joy*		at acpi?		# Joystick/Game port
#lpt*		at acpi?		# Parallel port
mpu*		at acpi?		# Roland MPU-401 MIDI UART
pckbc*		at acpi?		# PC keyboard controller
#pcppi*		at acpi?		# AT-style speaker sound

# Basic Bus Support

# PCI bus support
pci*	at mainbus? bus ?
pci*	at pchb? bus ?
pci*	at ppb? bus ?

# PCI bridges
pchb*	at pci? dev ? function ?	# PCI-Host bridges
pcib*	at pci? dev ? function ?	# PCI-ISA bridges
ppb*	at pci? dev ? function ?	# PCI-PCI bridges

# ISA bus support
isa0	at mainbus?
isa0	at pcib?

# Console Devices

# wscons
pckbc0		at isa?			# pc keyboard controller
pckbd*		at pckbc?		# PC keyboard
pms*		at pckbc?		# PS/2 mouse for wsmouse
#options 	PMS_DISABLE_POWERHOOK	# Disable PS/2 reset on resume
options 	PMS_SYNAPTICS_TOUCHPAD	# Enable support for Synaptics Touchpads
options 	PMS_ELANTECH_TOUCHPAD	# Enable support for Elantech Touchpads
vga*		at pci? dev ? function ?
#genfb*		at pci? dev ? function ?
options 	VCONS_DRAW_INTR
wsdisplay*	at vga? console ?
wsdisplay*	at wsemuldisplaydev?
wskbd*		at pckbd? console ?
wsmouse*	at pms? mux 0

attimer0	at isa?
pcppi0		at isa?
sysbeep0	at pcppi?

# Serial Devices

# ISA serial interfaces
#options 	COM_HAYESP		# adds Hayes ESP serial board support
com0	at isa? port 0x3f8 irq 4	# Standard PC serial ports
com1	at isa? port 0x2f8 irq 3

# Hardware monitors

# Intel PIIX4 power management controllers
piixpm* at pci? dev ? function ?	# PIIX4 compatible PM controller
iic*	at piixpm?			# SMBus on PIIX4

# IDE and related devices
# PCI IDE controllers - see pciide(4) for supported hardware.
# The 0x0001 flag force the driver to use DMA, even if the driver doesn't know
# how to set up DMA modes for this chip. This may work, or may cause
# a machine hang with some controllers.
pciide* at pci? dev ? function ? flags 0x0000	# GENERIC pciide driver
acardide* at pci? dev ? function ?	# Acard IDE controllers
aceride* at pci? dev ? function ?	# Acer Lab IDE controllers
ahcisata* at pci? dev ? function ?	# AHCI SATA controllers
artsata* at pci? dev ? function ?	# Intel i31244 SATA controller
cmdide* at pci? dev ? function ?	# CMD tech IDE controllers
cypide* at pci? dev ? function ?	# Cypress IDE controllers
hptide* at pci? dev ? function ?	# Triones/HighPoint IDE controllers
iteide* at pci? dev ? function ?	# IT Express IDE controllers
ixpide* at pci? dev ? function ?	# ATI IXP IDE controllers
jmide*	at pci? dev ? function ?	# JMicron PCI-e PATA/SATA controllers
ahcisata* at jmide?
mvsata* at pci? dev ? function ?	# Marvell Hercules-I/II
optiide* at pci? dev ? function ?	# Opti IDE controllers
piixide* at pci? dev ? function ?	# Intel IDE controllers
pdcide* at pci? dev ? function ?	# Promise IDE controllers
pdcsata* at pci? dev ? function ?	# Promise SATA150 controllers
satalink* at pci? dev ? function ?	# SiI SATALink controllers
siisata* at pci? dev ? function ?	# SiI SteelVine controllers
siside* at pci? dev ? function ?	# SiS IDE controllers
slide*	at pci? dev ? function ?	# Symphony Labs IDE controllers
svwsata* at pci? dev ? function ?	# ServerWorks SATA controllers
toshide* at pci? dev ? function ?	# TOSHIBA PICCOLO controllers
viaide* at pci? dev ? function ?	# VIA/AMD/Nvidia IDE controllers

# ISA ST506, ESDI, and IDE controllers
# Use flags 0x01 if you want to try to use 32bits data I/O (the driver will
# fall back to 16bits I/O if 32bits I/O are not functional).
# Some controllers pass the initial 32bit test, but will fail later.
wdc0	at isa? port 0x1f0 irq 14 flags 0x00
wdc1	at isa? port 0x170 irq 15 flags 0x00

# ATA (IDE) bus support
atabus* at ata?
options 	ATADEBUG

# IDE drives
# Flags are used only with controllers that support DMA operations
# and mode settings (e.g. some pciide controllers)
# The lowest order four bits (rightmost digit) of the flags define the PIO
# mode to use, the next set of four bits the DMA mode and the third set the
# UltraDMA mode. For each set of four bits, the 3 lower bits define the mode
# to use, and the last bit must be 1 for this setting to be used.
# For DMA and UDMA, 0xf (1111) means 'disable'.
# 0x0fac means 'use PIO mode 4, DMA mode 2, disable UltraDMA'.
# (0xc=1100, 0xa=1010, 0xf=1111)
# 0x0000 means "use whatever the drive claims to support".
wd*	at atabus? drive ? flags 0x0000

# ATAPI bus support
atapibus* at atapi?


# ATA RAID configuration support, as found on some Promise controllers.
pseudo-device ataraid
ld*	at ataraid? vendtype ? unit ?

# ATAPI devices
# flags have the same meaning as for IDE drives.
cd*	at atapibus? drive ? flags 0x0000	# ATAPI CD-ROM drives
sd*	at atapibus? drive ? flags 0x0000	# ATAPI disk drives
st*	at atapibus? drive ? flags 0x0000	# ATAPI tape drives
uk*	at atapibus? drive ? flags 0x0000	# ATAPI unknown


# Miscellaneous mass storage devices

# ISA floppy
fdc0	at isa? port 0x3f0 irq 6 drq 2	# standard PC floppy controllers
#fdc1	at isa? port 0x370 irq ? drq ?
fd*	at fdc? drive ?			# the drives themselves
# some machines need you to do this instead of fd*
#fd0	at fdc0 drive 0

# USB Controller and Devices

# PCI USB controllers
uhci*	at pci?	dev ? function ?	# Universal Host Controller (Intel)

# USB bus support
usb*	at uhci?

# USB Hubs
uhub*	at usb?
uhub*	at uhub? port ?

# USB HID device
uhidev* at uhub? port ? configuration ? interface ?

# USB Mice
ums*	at uhidev? reportid ?
wsmouse* at ums? mux 0

# USB Keyboards
ukbd*	at uhidev? reportid ?
wskbd*	at ukbd? console ? mux 1

# USB Generic HID devices
uhid*	at uhidev? reportid ?

# USB Printer
ulpt*	at uhub? port ? configuration ? interface ?

# USB Modem
umodem* at uhub? port ? configuration ?
ucom*	at umodem?

# USB Mass Storage
umass*	at uhub? port ? configuration ? interface ?
wd* at umass?

# Audio Devices

# Audio support
audio*	at audiobus?

# MIDI support
midi*	at pcppi?		# MIDI interface to the PC speaker

# The spkr driver provides a simple tone interface to the built in speaker.
#spkr0	at pcppi?		# PC speaker

# Virtio devices
virtio*	at pci? dev ? function ?	# Virtio PCI device
viomb*	at virtio?			# Virtio memory balloon device
ld*	at virtio?			# Virtio disk device
vioif*	at virtio?			# Virtio network device
viornd*	at virtio?			# Virtio entropy device


# Pull in optional local configuration
cinclude "arch/amd64/conf/GENERIC.local"


# Pseudo-Devices

pseudo-device 	crypto			# /dev/crypto device
pseudo-device	swcrypto		# software crypto implementation

# disk/mass storage pseudo-devices
pseudo-device	bio			# RAID control device driver
pseudo-device	ccd			# concatenated/striped disk devices
pseudo-device	cgd			# cryptographic disk devices
#pseudo-device	raid			# RAIDframe disk driver
options 	RAID_AUTOCONFIG		# auto-configuration of RAID components
#Options to enable various other RAIDframe RAID types.
#options 	RF_INCLUDE_EVENODD=1
#options 	RF_INCLUDE_RAID5_RS=1
#options 	RF_INCLUDE_PARITYLOGGING=1
#options 	RF_INCLUDE_CHAINDECLUSTER=1
#options 	RF_INCLUDE_INTERDECLUSTER=1
#options 	RF_INCLUDE_PARITY_DECLUSTERING=1
#options 	RF_INCLUDE_PARITY_DECLUSTERING_DS=1
pseudo-device	fss			# file system snapshot device
pseudo-device	putter			# for puffs and pud

pseudo-device	md			# memory disk device (ramdisk)
options 	MEMORY_DISK_HOOKS	# enable root ramdisk
options 	MEMORY_DISK_DYNAMIC	# loaded via kernel module(7)

pseudo-device	vnd			# disk-like interface to files
options 	VND_COMPRESSION		# compressed vnd(4)

# network pseudo-devices
pseudo-device	bpfilter		# Berkeley packet filter
#pseudo-device	carp			# Common Address Redundancy Protocol
#pseudo-device	ipfilter		# IP filter (firewall) and NAT
pseudo-device	loop			# network loopback
#pseudo-device	ifmpls			# MPLS pseudo-interface
pseudo-device	ppp			# Point-to-Point Protocol
pseudo-device	pppoe			# PPP over Ethernet (RFC 2516)
pseudo-device	sl			# Serial Line IP
pseudo-device	strip			# Starmode Radio IP (Metricom)
pseudo-device	irframetty		# IrDA frame line discipline
pseudo-device	tun			# network tunneling over tty
pseudo-device	tap			# virtual Ethernet
pseudo-device	gre			# generic L3 over IP tunnel
pseudo-device	gif			# IPv[46] over IPv[46] tunnel (RFC1933)
#pseudo-device	faith			# IPv[46] tcp relay translation i/f
pseudo-device	stf			# 6to4 IPv6 over IPv4 encapsulation
pseudo-device	vlan			# IEEE 802.1q encapsulation
#pseudo-device	bridge			# simple inter-network bridging
#options 	BRIDGE_IPF		# bridge uses IP/IPv6 pfil hooks too
pseudo-device	agr			# IEEE 802.3ad link aggregation
#pseudo-device	pf			# PF packet filter
#pseudo-device	pflog			# PF log if
#pseudo-device	pfsync			# PF sync if
pseudo-device	npf			# NPF packet filter

#
# accept filters
pseudo-device   accf_data		# "dataready" accept filter
pseudo-device   accf_http		# "httpready" accept filter

# miscellaneous pseudo-devices
pseudo-device	pty			# pseudo-terminals
pseudo-device	sequencer		# MIDI sequencer
# rnd works; RND_COM does not on port i386 yet.
#options 	RND_COM			# use "com" randomness as well (BROKEN)
pseudo-device	clockctl		# user control of clock subsystem
pseudo-device	ksyms			# /dev/ksyms
pseudo-device	lockstat		# lock profiling
pseudo-device	bcsp			# BlueCore Serial Protocol
pseudo-device	btuart			# Bluetooth HCI UART (H4)

# a pseudo device needed for Coda	# also needs CODA (above)
pseudo-device	vcoda			# coda minicache <-> venus comm.

# a pseudo device needed for SMBFS
pseudo-device	nsmb			# experimental - SMB requester

# wscons pseudo-devices
pseudo-device	wsmux			# mouse & keyboard multiplexor
pseudo-device	wsfont

# pseudo audio device driver
pseudo-device	pad

# userland interface to drivers, including autoconf and properties retrieval
pseudo-device	drvctl

options 	FILEASSOC		# fileassoc(9) - required for Veriexec

# Veriexec
#
# a pseudo device needed for veriexec
pseudo-device	veriexec
#
# Uncomment the fingerprint methods below that are desired. Note that
# removing fingerprint methods will have almost no impact on the kernel
# code size.
#
options VERIFIED_EXEC_FP_RMD160
options VERIFIED_EXEC_FP_SHA256
options VERIFIED_EXEC_FP_SHA384
options VERIFIED_EXEC_FP_SHA512
options VERIFIED_EXEC_FP_SHA1
options VERIFIED_EXEC_FP_MD5

options 	PAX_MPROTECT=0		# PaX mprotect(2) restrictions
options 	PAX_ASLR=0		# PaX Address Space Layout Randomization
